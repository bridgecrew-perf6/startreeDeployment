apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{  .Values.service.name }}
  namespace: deployer-namespace
  labels:
    chart: {{ template "deployer.chart" . }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "deployer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if .Values.enablePrometheusAnnotations }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: {{ .Values.server.port | quote }}
      {{- end }}
      labels:
        {{- include "deployer.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        {{- if .Values.server.enabled }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tagOverride | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/deployer"]
          args: ["-config", "/etc/deployer/config.yaml"]
          ports:
            - name: http
              containerPort: {{ .Values.server.port }}
              protocol: TCP
          env:
            - name: RO_DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.hostKey }}
            - name: RO_DATABASE_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.portKey }}
            - name: RO_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.userKey }}
            - name: RO_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.passwordKey }}
            - name: RO_DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.secretName }}
                  key: {{ .Values.database.nameKey }}
            - name: RO_SLACK_USER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.slack.secretName }}
                  key: {{ .Values.slack.botUserTokenKey }}
            - name: RO_SLACK_SIGNING_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.slack.secretName }}
                  key: {{ .Values.slack.signingSecretKey }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: config
              mountPath: /etc/deployer
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}
        {{- if .Values.extraSidecars }}
            {{ .Values.extraSidecars | nindent 8 }}
        {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "deployer.name" . }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8}}
      {{- end -}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
